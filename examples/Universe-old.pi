Empty : Type;
Empty = { };

Unit : Type;
Unit = { unit };

Nat : Type;
Nat = (l : { z s }) * case l of {
                           z -> Unit
			 | s -> [Nat] };

zero : Nat;
zero = ('z,'unit);

succ : Nat -> Nat;
succ = \ n -> ('s,n);

one : Nat;
one = succ zero;

two : Nat;
two = succ one;

Fin : Nat -> Type;
Fin = \ n -> split n with (ln , n') ->
                 ! case ln of {
		     z -> [Empty]
		   | s -> [(l : { z s }) * case l of {
                                             z -> Unit
			                   | s -> Fin n'}]};

fz : (n:Nat) -> Fin (succ n);
fz = \ n -> ('z , 'unit );

fs : (n:Nat) -> Fin n -> Fin (succ n);
fs = \ n i -> ('s, i);

type : Type;
El : type -> Type;


type = ( l : {type pi sigma enum lift box} ) * 
       case l of {
         type -> Unit
       | pi -> [(a : type) * (El a -> type)]
       | sigma -> [(a : type) * (El a -> type)]
       | enum -> Nat
       | lift -> [type]
       | box -> [^ type] };
{-
ty : type;
ty = ('type,'unit);

pi : (a:type) -> (El a -> type) -> type;
pi = \ a b -> ('pi,(a,b));

sigma : (a:type) -> (El a -> type) -> type;
sigma = \ a b -> ('sigma,(a,b));

enum : Nat -> type;
enum = \ n -> ('enum,n);

lift : type -> type;
lift = \ a -> ('lift,a);

box : type -> type;
box = \ a -> ('box,[a]);

El = \ a -> split a with (la , a') ->
            ! case la of {
	        type -> [type]
	      | pi -> split a' with (b, c) ->
	      	      [(x : El b) -> El (c x)]
  	      | sigma -> split a' with (b, c) ->
	      	      [(x : El b) * El (c x)]
              | enum -> [Fin a']
	      | lift -> [^ (El a')]
	      | box -> [El (! a')] };

bool : type;
bool = enum two;

tt : El bool;
tt = fs one (fz zero);

ff : El bool;
ff = fz one;

nat : type;
nat = sigma bool (\ i -> split i with (li,i') ->
      	    	         case li of {
                           z -> enum one
                         | s -> box nat });

zz : El nat;
zz = (ff,fz zero);

ss : El nat -> El nat;
ss = \ i -> (tt,i);

{-
eq : (a : type) -> El a -> El a -> type
eq \ a x y -> split a with la , a' ->
            ! case la of
-}
	    
	            

